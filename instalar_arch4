#!/bin/bash

#Variable para zona horaria
zonahorariaok=$(curl https://ipapi.co/timezone)
clear

if ping -c 3 www.google.com &> /dev/null; then
  clear
    dialog --title "-|  Revisando Conexión  |-" --backtitle "$titulo" \
    --ok-label 'Siguiente' --prgbox "ping -c 3 archlinux.org && echo && echo Si Hay Internet!" 15 100 

else
     dialog --title "-|  Conexión a RED  |-" --backtitle "$titulo" \
   --prgbox "\n\nping -c 3 archlinux.org && echo && echo No hay conexión a Internet" 6 100 
  dialog --backtitle "$titulo" --title "-| Error de RED |-" --msgbox "No hay conexión a Internet" 5 60
  dialog --backtitle "$titulo" --title "-| Conexión WiFi |-" --yesno "¿ Tienes red wifi ?" 5 45 
case $? in 
  0)  wifi-menu
    wifinet=$(netctl list | awk -F " " '{print $2}');;
  1)  dialog --backtitle "$titulo" --title "-| Ethernet |-" --msgbox "\nPruebe conectando bien su cable de Ethernet\nIntentalo nuevamente..." 8 50
      exit;;
esac
fi


#Desmontamos todo disco y swapoff
swapdisco=$( fdisk -l | grep "/dev/\|swap" | grep swap | awk -F ' ' '{print $1}' )
umount -R /mnt
swapoff ${swapdisco}
swapoff -a
swapon -a



tituloInicio="| Visita Nuestra Comunidad - https://t.me/ArchLinuxCristo - by: Arcris v2.0 |"

titulo="| Instalación de ArchLinux en Español - https://t.me/ArchLinuxCristo |"

while true; do
choice=$(dialog --keep-tite --backtitle "$tituloInicio" --title "-| Arcris |-" \
--ok-label '*Seleccionar*' --nocancel --column-separator "|" --no-tags \
--menu "\nSeleccione una opción a continuación utilizando las teclas\n[FLECHA ARRIBA] / [FLECHA ABAJO] y [ESPACIO] o [ENTER]\
\nLas teclas alternativas también se pueden usar: [+], [-] y [TAB]. \n " 21 70 11 \
1 "HOSTNAME | Establecer el nombre del computador" \
2 "TIMEZONE | Establecer la zona horaria del sistema" \
3 "LANGUAGE | Establecer el idioma del sistema" \
4 "USERS | Establecer clave /root y usuario nuevo" \
5 "DISK | Particionar la unidad de instalación" \
6 "KERNEL | Establecer el kernel del sistema" \
7 "DRIVER VIDEO | Establecer el driver de video del sistema" \
8 "(DE) or (WM) | Establecer un Escritorio o Gestor de Ventanas" \
9 "EXTRA PROGRAMS | Selecciona programas extras del sistema" \
10 "INSTALL | Instalar Arch Linux" 3>&1 1>&2 2>&3)

case "$choice" in
"1")
##INICIO DE HOSTNAME
# MENSAJE 
dialog --backtitle "$titulo" \
--title "| REGLAS EN PERFILES NUEVOS |" \
--msgbox "\n> No se permite caracteres especiales\
\n> Máximo de 8 caracteres\
\n> Ni letras con tilde\n> Por ejemplo: è, ü, ñ, etc...\
\n> Ni otros caracteres especiales\n> ~!@#$%^&*_-+=|\(){}[]:;<;>;,.?/ \
\n\n     >>  Ya que pueden causar errores  <<" 13 50

#nombre de pc (hostname)
hostname=$(dialog --backtitle "$titulo" --title "| Hostname |" --inputbox "|  Nombre del computador  |" 8 40 2>&1 > /dev/tty)

##FINAL DE HOSTNAME
;;



"2")
## INICIO DE TIMEZONE
### ZONA HORARIA
dialog --backtitle "$titulo" --title "| ZONA HORARIA |" --defaultno --yesno "\n       >>> $zonahorariaok <<<\n\n       ¿Deseas modificarlo?" 8 40 

if [ "$?" = "0" ]; then

selected=0 
timezonedir=/usr/share/zoneinfo
while [ "$selected" = "0" ] 
do

  clear
  check=$(ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{if (NR!=1) {print}}' | head -1)
  if [[ $check != America ]]; then 
    echo "../ UP" >timezones 
  fi

  ls -l $timezonedir | grep -v .tab | awk '/drwx/' | awk -F " " '{print $9}' | awk '{print $0"/"}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones 
  
  ls -l $timezonedir | grep -v .tab | awk '/-rw-/' | awk -F " " '{print $9}' | awk '$fs=$fs" Time"' | awk '{if (NR!=1) {print}}'>>timezones
  timezones=$(cat timezones) 
  rm timezones 
  timezone=$(dialog --backtitle "| Instalación de ArchLinux |" --clear --title "Tu Zona Horaria es $(cat timezone): " \
      --menu "Ingresa la zona horaria" 20 0 20 ${timezones} 2>&1 >/dev/tty) 
  clear
  if [ "$?" = "0" ] 
  then
    if [[ $timezone == *"/"* ]]; then 
      timezonedir=$timezonedir/$timezone
    else 
      zonadefaultNo=true
      selected=1
    fi
  fi
done

else
#zone="$(cat timezone)"
zonadefaultYes=true
fi
## FIN DE TIMEZONE
;;



"3")
## INICIO DE LANGUAGE 

cmd=(dialog --backtitle "$titulo" --title "-| Distribución del teclado |-" --keep-tite --menu "\n" 10 50 10)

options=(la-latin1  "LatinoAmericano"
         es     "Español"
         us     "Ingles"
         otros    "(+)Teclados")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        es)
            loadkeys es
      keyboard="es"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        la-latin1)
            loadkeys la-latin1
      keyboard="la-latin1"
      loadkeys=$keyboard 
      keymap=$keyboard 
            ;;
            
        us)
            loadkeys us
      keyboard="us"
      loadkeys=$keyboard 
      keymap=$keyboard  
            ;;
            
        otros)
            selected=0 
      while [ $selected == "0" ];do 
        locales="$(localectl list-keymaps | awk '$locales=$locales" Keyboard"')" && locales=$(echo "$locales") 
        keyboard=$(dialog --backtitle "$titulo" --clear --title "-| Distribución del teclado: |-" --menu "\n" 15 50 15   ${locales} 2>&1 > /dev/tty) 
        if [ $? == 0 ];then 
          loadkeys $keyboard 
          keymap=$keyboard 
          selected=1 
        else 
          dialog --backtitle "$titulo" --title "-| ERROR |-" --stdout --ok-label 'Siguiente' --msgbox "Ingrese una distribución del teclado para continuar" 5 55 
        fi
      done
            ;;
    esac
done


### IDIOMA DEL SISTEMA
sed -i '176d' /etc/locale.gen
sed -i "176i #en_US.UTF-8 UTF-8" /etc/locale.gen

locales="$(cat /etc/locale.gen | grep '.UTF-8 UTF-8' | sed '1,4d' | sed 's/\(.\{1\}\)//')"
locale=$(dialog --backtitle "$titulo" --clear --title "| Selecciona tu país |" \
--menu "\nEjemplos:\nes_PE = Perú\nes_AR = Argentina\nes_MX = Mexico" 25 0 20 ${locales} 2>&1 > /dev/tty)

;;
## FIN DE LANGUAGE



"4")
## INICIO DE USERS
# MENSAJE 
dialog --backtitle "$titulo" \
--title "| REGLAS EN PERFILES NUEVOS |" \
--msgbox "\n> No se permite caracteres especiales\
\n> Máximo de 8 caracteres\
\n> Ni letras con tilde\n> Por ejemplo: è, ü, ñ, etc...\
\n> Ni otros caracteres especiales\n> ~!@#$%^&*_-+=|\(){}[]:;<;>;,.?/ \
\n\n     >>  Ya que pueden causar errores  <<" 13 50

#Clave para root
while [ $rootpasswd != $rootpasswd2 ]
do 
    rootpasswd=$(dialog --backtitle "$titulo" --title "|  Clave de Root  |" --insecure --passwordbox "|  Ingrese contraseña de root  |" 8 40 2>&1 > /dev/tty)
    rootpasswd2=$(dialog --backtitle "$titulo" --title "|  Clave de Root |" --insecure --passwordbox "|  Confirme contraseña de root  |" 8 40 2>&1 > /dev/tty)
    if [ $rootpasswd != $rootpasswd2 ];then 
     dialog --backtitle "$titulo" --title "| Clave incorrecta |" --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done
dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\n\nContraseña Conrrecta!' 9 40
#Clave para root

#USUARIO NUEVO
username=$(dialog --backtitle "$titulo" --title "|  Creación de usuario  |" \
           --form "\nIngresa tu Usuario Nuevo\n\nDebe iniciar en letra y en minúscula\nNada de caracteres especiales\n " 0 0 0 \
           " Usuario Nuevo:" 1 1 "user" 1 17 25 30 2>&1 > /dev/tty)

user=$(echo "$username" | sed -n 1p)
user=$(echo $user | tr '[:upper:]' '[:lower:]')

#CLAVE USUARIO NUEVO
while [ $userpasswd != $userpasswd2 ]
do 
    userpasswd=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Contraseña de $user" 8 40 2>&1 > /dev/tty)
    userpasswd2=$(dialog --backtitle "$titulo" --title "|  Contraseña de $user  |" --insecure --passwordbox "Confirma tu clave de $user" 8 40 2>&1 > /dev/tty)
    if [ $userpasswd != $userpasswd2 ];then 
     dialog --backtitle "$titulo" --title " Clave incorrecta " --msgbox 'Las contraseñas no coinciden\n      Intente nuevamente...' 6 50
  else 
    clear
  fi
done
dialog --backtitle "$titulo" --title "| Clave Correcta |" --msgbox '\n\nContraseña Conrrecta!' 9 40

;;

## FIN DE USERS



"5")
## INICIO DE DISK 
dialog --backtitle "$titulo" --title "-| Mensaje |-" --msgbox "\n> UEFI trabaja con discos en GPT \n\n> UEFI su partición boot es formateada en FAT32 \n\n> BIOS LEGACY trabaja con discos en DOS/MBR\n\n> BIOS LEGACY su partición boot es formateada en EXT4\n( La partición boot en linux es opcional )" 13 60




dialog --backtitle "$titulo" --title "-| Particionado de Disco |-" --yesno "\n    ¿ Desea particionar su disco de manera automatica ?\n \nPresione Si - Automatico (Borrado y creado automatico)\nPresione No - Manera Manual" 9 62
case $? in
   0) #Inicio de automatico
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk=$(dialog --backtitle "$titulo" --clear  --ok-label 'Seleccionar' --no-cancel --menu "Selecciona el disco para Linux" 10 50 0 ${part} 2>&1 >/dev/tty)


uefi=$( ls /sys/firmware/efi/ | grep -ic efivars )

#swapsize=$( free -m | grep "Mem" | awk '{ print $2 }' )
#swapsize=$(( ( swapsize / 2000 ) + 1 ))

if [ $uefi == 1 ]
then
    
#DIALOG PARA YES Y NO CASOS
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Memoria SWAP |-" --yesno "\n ¿ Deseas agregar RAM Virtual ?" 7 35

case $? in
   0) swapsize=$(dialog --no-cancel --backtitle "$titulo" --title "-| Memoria SWAP |-" \
--form "\nIngresa la cantidad de Memoria Virtual\n\nGigabytes (G) - Megabytes (M) - Kibibyte (K)\n\n> No dejar espacios al inicio\n> No olvidar su etiqueta al final del número\n> [Tabulador] para cambiar opciones\n" 0 0 0 \
" Memoria SWAP:" 1 1 "4G" 1 17 25 30 2>&1 > /dev/tty)
        
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && parted ${disk} mklabel gpt && \
sgdisk ${disk} -n=1:0:+1G -t=1:ef00 && \
sgdisk ${disk} -n=2:0:+${swapsize} -t=2:8200 && \
sgdisk ${disk} -n=3:0:0 && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-efi
echo $partitions | awk -F ' ' '{print $2}' >  swap-efi
echo $partitions | awk -F ' ' '{print $3}' >  root-efi

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-efi) && \
mount $(cat root-efi) /mnt && \
mkfs.fat -F 32 $(cat boot-efi) && \
mkdir -p /mnt/efi && \
mount $(cat boot-efi) /mnt/efi && \
mkswap $(cat swap-efi) && \
swapon $(cat swap-efi)" 20 150
;;


   1) dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && parted ${disk} mklabel gpt && \
sgdisk ${disk} -n=1:0:+1G -t=1:ef00 && \
sgdisk ${disk} -n=2:0:0 && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-efi
echo $partitions | awk -F ' ' '{print $2}' >  root-efi

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - UEFI |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-efi) && \
mount $(cat root-efi) /mnt && \
mkfs.fat -F 32 $(cat boot-efi) && \
mkdir -p /mnt/efi && \
mount $(cat boot-efi) /mnt/efi" 20 150
;;


   255) echo "[ESC] Salir."
        exit
        ;;
esac


else

#DIALOG PARA YES Y NO CASOS
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Memoria SWAP |-" --yesno "\n ¿ Deseas agregar RAM Virtual ?" 7 35

case $? in
   0) swapsize=$(dialog --no-cancel --backtitle "$titulo" --title "-| Memoria SWAP |-" \
--form "\nIngresa la cantidad de Memoria Virtual\n\nGigabytes (G) - Megabytes (M) - Kibibyte (K)\n\n> No dejar espacios al inicio\n> No olvidar su etiqueta al final del número\n> [Tabulador] para cambiar opciones\n" 0 0 0 \
" Memoria SWAP:" 1 1 "4G" 1 17 25 30 2>&1 > /dev/tty)
        
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && \
(echo o; echo n; echo p; echo 1; echo ""; echo +250M; echo n; echo p; echo 2; echo ""; echo +${swapsize}; echo n; echo p; echo 3; echo ""; echo ""; echo t; echo 2; echo 82; echo a; echo 1; echo w; echo q) | fdisk ${disk} && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-boot
echo $partitions | awk -F ' ' '{print $2}' >  swap-boot
echo $partitions | awk -F ' ' '{print $3}' >  root-boot

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-boot) && \
mount $(cat root-boot) /mnt && \
mkfs.ext4 $(cat boot-boot) && \
mkdir -p /mnt/boot && \
mount $(cat boot-boot) /mnt/boot && \
mkswap $(cat swap-boot) && \
swapon $(cat swap-boot)" 20 150
;;


   1) dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "sgdisk --zap-all ${disk} && \
(echo o; echo n; echo p; echo 1; echo ""; echo +250M; echo n; echo p; echo 2; echo ""; echo ""; echo a; echo 1; echo w; echo q) | fdisk ${disk} && \
fdisk -l ${disk} > /tmp/partitions && \
cat /tmp/partitions" 13 100


partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1}')"

echo $partitions | awk -F ' ' '{print $1}' >  boot-boot
echo $partitions | awk -F ' ' '{print $2}' >  root-boot

dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Preparando Disco - BIOS LEGACY |-" --stdout --ok-label "Siguiente" \
--prgbox "mkfs.ext4 $(cat root-boot) && \
mount $(cat root-boot) /mnt && \
mkfs.ext4 $(cat boot-boot) && \
mkdir -p /mnt/boot && \
mount $(cat boot-boot) /mnt/boot" 20 150
;;


   255) echo "[ESC] Salir."
        exit
        ;;
esac


fi
;;
    
   1) #--title "| Selección de Disco |"
part="$(echo "print devices" | parted | grep /dev/ | awk '{if (NR!=1) {print}}')" 
disk=$(dialog --backtitle "$titulo" --clear  --ok-label 'Seleccionar' --no-cancel --menu "Selecciona el disco para Linux" 10 50 0 ${part} 2>&1 >/dev/tty)

fdisk -l $disk > /tmp/partitions


#SISTEMA UEFI O BIOS
uefi=$( parted $disk print | grep -ic gpt )

if [ $uefi == 1 ] && [ -d /sys/firmware/efi ]
then
dialog --backtitle "|  SISTEMA UEFI Y DISCO GPT  |" --title "-|  SISTEMA UEFI |-"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep gpt && echo "Su disco SI es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 12 150


elif [ $uefi == 0 ] && [ -d /sys/firmware/efi ]
then
dialog --backtitle "| SISTEMA UEFI Y DISCO DOS MBR |" --title "|  UEFI TRABAJA CON GPT |" \
--yesno "\nUsted inicio la USB en sistema UEFI y su disco es DOS MBR\nConvertir su disco DOS/MBR a GPT\n\nAl convertir su disco perderá toda su información \
\nSi tiene otras particiones en el Disco\nNo realice la conversión \n\n¿Desea convertir su disco DOS/MBR a GPT?" 13 65
case $? in 
  0)dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Convertir Disco |" --stdout --ok-label "Siguiente" \
  --prgbox "echo '' && echo '' && echo '' && sgdisk --zap-all $disk && parted $disk mklabel gpt" 10 80;;
  
  1)exit
esac

elif [ $uefi == 0 ]
then
dialog --backtitle "|  SISTEMA BIOS LEGACY Y DISCO DOS MBR  |" --title "| SISTEMA BIOS LEGACY |"  --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && cat /tmp/partitions | grep dos && echo "Su disco SI es compatible para continuar" && echo "" && cat /tmp/partitions | grep /dev/ )" 12 150

else  
dialog --backtitle "| SISTEMA BIOS LEGACY Y DISCO GPT |" --title "|  BIOS LEGACY TRABAJA CON DOS MBR |" \
--yesno "\nUsted inicio la USB en sistema UEFI y su disco es DOS MBR\nConvertir su disco GPT a DOS/MBR\n\nAl convertir su disco perderá toda su información \
\nSi tiene otras particiones en el Disco\nNo realice la conversión \n\n¿Desea convertir su disco DOS/MBR a GPT?" 13 65
case $? in 
  0)dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "| Convertir Disco |" --stdout --ok-label "Siguiente" \
  --prgbox "echo '' && echo '' && echo '' && sgdisk --zap-all $disk && parted $disk mklabel msdos" 10 80;;
  1)exit
esac
fi

#FIN DE CONVERSION DE DISCO

partitioner=$(dialog --backtitle "$titulo" --clear --title "-| Particionado de Disco |-" --ok-label 'Seleccionar' --no-cancel --menu ">\n> Crear particiones correctamente\n>" 9 0 0\
    "cfdisk" "Un particionador casi grafico" \
    "fdisk" "Un particionador de linea de comandos" \
    "parted" "Un particionador de linea de comandos" 2>&1 > /dev/tty)
$partitioner $disk

fdisk -l "$disk" > /tmp/partitions

partitions="$(cat /tmp/partitions | grep /dev/ | awk '{if (NR!=1) {print}}' | sed 's/*//g' | awk -F ' ' '{print $1,$5}')"
p="$(echo "$partitions")"
#--title "| Elige la partición de Administrador |"
part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear \
  --menu "Selecciona la partición para Root: [ / ]" 15 60 0 ${p} 2>&1 > /dev/tty)
dialog --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Verificando estado de Disco |-" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
rootfs=$part


p=$(echo "$p" | grep -v $part)



partitioning(){
  fs="$(ls /bin/* | grep mkfs | awk '{if (NR!=1) {print}}' | sed 's/^.\{10\}//g' | awk '{print substr($0, 0, length($0)-0)}' | awk '$fs=$fs" Type"' |  awk '{if (NR!=1) {print}}' | grep -v cramfs | grep -v hfsplus | grep -v  bfs | grep -v msdos | grep -v minix)"
  format=$(dialog --backtitle "$titulo" --clear --title '-| FORMATO DE PARTICIÓN |-' \
          --ok-label 'Seleccionar' --cancel-label 'No formatear' --menu "\nElige el tipo de sistema de archivos\n\nEXT4 >> Para Linux\nFAT >> Para FAT32 para la partición UEFI\nNTFS >> Para Windows\n\n$(fdisk -l $disk | grep dos || fdisk -l $disk | grep gpt)" 15 50 0 ${fs} 2>&1 > /dev/tty)      

  case $format in
    ext2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext2 -F $part" 20 80;;
      ext3) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT3 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext3 -F $part" 20 80;;
      ext4) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en EXT4 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ext4 -F $part" 20 80;;
      reiserfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ReiserFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.reiserfs -f -f $part" 20 80;;
      vfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.vfat -F32 $part" 7 80;;
      fat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en FAT 32 | Uso General para particiones UEFI... |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.fat -F32 $part" 7 80;;
      exfat) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en ExFAT |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.exfat $part" 20 80;;
      ntfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NTFS - Windows |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.ntfs -Q $part" 20 80;;
      f2fs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en F2FS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && modprobe f2fs && mkfs.f2fs $part" 20 80;;
      jfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en JFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.jfs -q $part" 20 80;;
      xfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en XFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.xfs -f $part" 20 80;;
      nilfs2) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en NilFS2 |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.nilfs2 -f $part" 20 80;;
      udf) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en UDF |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.udf -F $part" 20 80;;
      btrfs) dialog --clear --no-collapse --cr-wrap --backtitle "$titulo" --title "| Formateando partición en BTRFS |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkfs.btrfs -f $part" 20 80;;
  esac
}

partitioning
mount "$rootfs" /mnt

cmd=(dialog --backtitle "$titulo" --separate-output --ok-label 'Montar y formatear selección' --cancel-label 'No tengo más particiones' \--checklist "Selecciona otros puntos de montajes:\n\
[SPACE] para marcar * \n\
[ENTER] para continuar." 10 80 0)
options=("/boot" "Archivos estáticos del cargador de arranque" off   
  "/efi" "Archivos EFI del cargador de arranque" off
  "/home" "Archivos de usuario" off
  "/tmp" "Archivos temporales" off
  "/usr" "Datos estáticos" off
  "/var" "Datos de variables" off
  "/srv" "Datos de los servicios prestados por este sistema" off
  "/opt" "Aplicaciones de terceros o privativos" off
  "swap" "Memoria virtual RAM" off
  )
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
  case $choice in
    "/boot")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: boot |" 0 55 0 ${p} 2>&1 > /dev/tty )
      bootfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      bootdir="boot"
      mkdir -p /mnt/boot
      mount "$bootfs" /mnt/boot
      p=$(echo "$p" | grep -v "$part")
      ;;
      
    "/efi")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: efi |" 0 55 0 ${p} 2>&1 > /dev/tty )
      efifs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      efidir="efi"
      mkdir -p /mnt/efi
      mount "$efifs" /mnt/efi
      p=$(echo "$p" | grep -v "$part")
      ;;
        
    "/home")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: home |" 0 55 0 ${p} 2>&1 > /dev/tty )
      homefs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      homedir="home"
      mkdir -p /mnt/home
      mount "$homefs" /mnt/home
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/tmp")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: tmp |" 0 55 0 ${p} 2>&1 > /dev/tty )
      tmpfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      tmpdir="tmp"
      mkdir -p /mnt/tmp
      mount "$tmpfs" /mnt/tmp
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/usr")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: usr |" 0 55 0 ${p} 2>&1 > /dev/tty )
      usrfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      usrdir="usr"
      mkdir -p /mnt/usr
      mount "$usrfs" /mnt/usr
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/var")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: var |" 0 55 0 ${p} 2>&1 > /dev/tty )
      varfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      vardir="var"
      mkdir -p /mnt/var
      mount "$varfs" /mnt/var
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/srv")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: srv |" 0 55 0 ${p} 2>&1 > /dev/tty )
      srvfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      srvdir="srv"
      mkdir -p /mnt/srv
      mount "$srvfs" /mnt/srv
      p=$(echo "$p" | grep -v "$part")
      ;;
    "/opt")

#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: opt |" 0 55 0 ${p} 2>&1 > /dev/tty )
      optfs="$part"
      dialog --backtitle "$titulo" --title "| Verificando estado de Disco |" --stdout --ok-label "Siguiente" --prgbox "e2fsck -f -y -v -C 0 $part" 20 80
      partitioning
      optdir="opt"
      mkdir -p /mnt/opt
      mount "$optfs" /mnt/opt
      p=$(echo "$p" | grep -v "$part")
      ;;
    "swap")
#     dialog --backtitle "$titulo" --title "| TIPO DE PARTICIÓN |" --stdout --ok-label 'Siguiente' --msgbox "$(echo "" && fdisk -l $disk | grep gpt && echo "" && fdisk -l $disk | grep /dev/ )" 11 150
      part=$(dialog --backtitle "$titulo" --ok-label 'Seleccionar' --no-cancel --clear --title "| Selecciona la partición |" \
        --menu "| Elige la partición que desea usar para: swap |" 0 55 0 ${p} 2>&1 > /dev/tty)
      dialog --title "| Formateando Swap Linux |" --stdout --ok-label "Siguiente" --prgbox "echo "" && mkswap $part && swapon $part" 10 100
      swap="$part"
      p=$(echo "$p" | grep -v "$part")
  esac
done
#PARTICIONADO MANUAL
    ;;
esac    

clear
partprobe
clear
;;
## FIN DE DISK



"6")
## INICIO DE KERNEL 
### KERNEL 

kernel_var=0 
while [ "$kernel_var" = "0" ] ; do

  kernel_select=`dialog --title "| KERNEL LINUX |" --backtitle "$titulo" \
    --stdout --ok-label "Seleccionar" --no-cancel --menu "Elige que kernel necesitas: \nLinux Stable es la mejor opción para iniciar\nLas otras opciones tienen un estilo diferente para instalar Drivers\nLas otras modificaciones del kernel trabajan con Drivers Libres" 16 0 2000 linux-stable "Kernel en su versión estable y módulos de Vanilla Linux" linux-hardened "Kernel enfocado en Seguridad" linux-lts "Kernel con soporte de larga duración" linux-zen "Kernel del esfuerzo colaborativo de varios hackers"`

#####Stable  
  if [ $kernel_select == linux-stable ]; then
##################################################################################
    r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    selec8168=true
    install8169=r8168
    fi

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxStable=true
  kernel_var=1


#####hardened
  elif [ $kernel_select == linux-hardened ]; then

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxHard=true
  kernel_var=1



######LTS
  elif [ $kernel_select == linux-lts ]; then
##################################################################################
    r8168=$(arch-chroot /mnt /bin/bash -c "lspci -k | grep 'RTL8111/8168/8411' ")
    if [[ $r8168  = *RTL8111/8168/8411* || $r8168 = *Rtl8111/8168/8411* || $r8168 = *rtl8111/8168/8411* ]]
    then      
    selec8168lts=true
    install8169=r8168-lts
    fi
cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxLts=true
  kernel_var=1  


###### ZEN
  elif [ $kernel_select == linux-zen ]; then
##################################################################################

cmd=(dialog --no-collapse --cr-wrap --backtitle "$titulo" --separate-output --column-separator "|" \
--no-tags --ok-label '< Siguiente >' --cancel-label '< No deseo esto >' --title "-| Extras Kernel |-" --checklist "Selecciona los modulos que necesitas\n[ ESPACIO ] - Para marcar o desmarcar *" 12 70 10)
options=(1 "Microcode del Procesador" on    # any option can be set to default to "on"
         2 "Driver para WiFi" off)
choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
clear
for choice in $choices
do
    case $choice in
        1) microdriverS=true
        ;; 
        2) wifidriverdmksS=true
        ;; 
        3) touchdriverS=true
        ;;
        4) blutudriverS=true
        ;;
    esac
done

  selecLinuxZen=true
  kernel_var=1
  
  
  fi
done

;;
### FIN KERNEL 



"7")
## INICIO DE DRIVER VIDEO
# MENSAJE 
dialog --backtitle "$titulo" \
--title "| Información |" \
--msgbox "\n> Si esta usando Maquina virtual la selección de Driver de Video es: \
\n  [Automatico] \n \
\n> Si esta usando Hardware real tiene dos opciones para seleccionar: \
\n  [Automatico] o [Manual] \n" 10 75

#Inicio de Video
VM=false
VMbox=false
VMqemu=false

infovideo () {
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "_"
echo -e ""
echo -e "\t\t\t         | Info Hardware de Video |          "
printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' _
echo -e ""
lspci -v | grep "VGA compatible controller" -A 9
echo ""
echo "Presiona [ENTER] para confirmar..."
read line
}


    ####################################################################
      
    case $(systemd-detect-virt) in
        oracle)
            virt="vbox"
            VM=true
        ;;
        vmware)
            virt="vmware"
            VM=true
        ;;
        qemu)
            virt="qemu"
            VM=true
        ;;
        kvm)
            virt="kvm"
            VM=true
        ;;
        microsoft)
            virt="hyper-v"
            VM=true
        ;;
        xen)
            virt="xen"
            VM=true
        ;;
    esac
    
    ####################################################################
kernel=$(arch-chroot /mnt uname -a | tail -c -6)

if [ "$VM" == "true" ]; then
    
            infovideo
            case "$virt" in
                
                vbox)   if [ "$kernel" == "Linux" ]; then
                            GPU="virtualbox-guest-utils xf86-video-vmware virtualbox-host-modules-arch mesa mesa-libgl"
                            GPUvirt="vboxservice"
                            echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt                            
                            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest utils" 8 80
                            VMbox=true
                        else
                            GPU="virtualbox-guest-dkms virtualbox-host-dkms mesa mesa-libgl"
                            GPUvirt="systemd-modules-load"
                            echo $GPUvirt | awk -F " " '{print $1}' > GPUvirt
                            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: VirtualBox Guest-dkms" 8 80
                            VMbox=true
                        fi
                ;;
                
                vmware) GPU="xf86-video-vmware xf86-input-vmmouse open-vm-tools net-tools gtkmm mesa mesa-libgl"
                        dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VMware\nInstalar: xf86-video-vmware" 8 80
                ;;
                
                
                hyper-v) GPU="xf86-video-fbdev mesa-libgl"                         
                ;;
                
                
                qemu) GPU="xf86-video-fbdev mesa mesa-libgl qemu-guest-agent"
                      GPUvirt="qemu-ga"
                      VMqemu=true
                      dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Instalar>"  --msgbox "\nVídeo Detectado VirtualBox\nInstalar: qemu-guest-agent" 8 80                   
                ;;
                
                
                *)      GPU="xf86-video-fbdev mesa-libgl"
                ;;
                
            esac

            
else

dialog --title "-| Driver de Vídeo |-" --yesno "\n¿ Desea instalar de manera automatica su driver de vídeo ? \nPresione Si - Automatico \nPresione No - Manera Manual" 9 62
case $? in
   0) inxi -Gx | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" \
--progressbox "-| Driver de Vídeo, lea su información, espere... |-" 15 100; sleep 7

if (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
    
GPU="xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd \
lib32-ocl-icd opencl-headers"

dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            

        elif (lspci | grep VGA | grep "Radeon R\|R2/R3/R4/R5" &>/dev/null); then
            
GPU="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "ATI\|AMD/ATI" &>/dev/null); then
                    
GPU="xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80

        elif (lspci | grep VGA | grep "Intel" &>/dev/null); then
            
GPU="xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
                
        else
            
GPU="xf86-video-vesa mesa lib32-mesa"
dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\n$GPU" 10 80
            
        fi
;;
   1) inxi -Gx | dialog --no-collapse --cr-wrap --backtitle "Instalación de ArchLinux - https://t.me/ArchLinuxCristo" \
    --progressbox "-| Driver de Vídeo, lea su información, espere... |-" 15 100; sleep 7

GPUHYBR=false

cmd=(dialog --keep-tite --no-collapse --cr-wrap --backtitle "$titulo" --title "-| Driver de Vídeo |-"  --column-separator "|" --no-tags --ok-label "< Seleccionar >" \
    --nocancel --menu "Seleciona el driver correcto:" 20 76 16)

options=(1 "Nvidia 440xx|(Linux Stable)"
         2 "Nvidia 390xx|(Linux Stable)"
         3 "Nvidia 340xx|(Linux Stable)"
         4 "Nvidia 440xx|(Linux Stable + Intel)"
         5 "Nvidia 390xx|(Linux Stable + Intel) No hybrid"
         6 "Nvidia 440xx|(Linux LTS)"
         7 "Nvidia 390xx|(Linux LTS)"
         8 "Nvidia 440xx|(Linux Hardened - Zen)"
         9 "Nvidia 390xx|(Linux Hardened - Zen)"
         10 "Nvidia|(Open Source)"
         11 "AMD - Radeon|(Open Source)"
         12 "AMD - ATI|(Open Source)"
         13 "Intel|(Open Source)")

choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)

for choice in $choices
do
    case $choice in
        1)
            GPU="nvidia nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
            
        2)
            GPU="nvidia-390xx nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            #libxnvctrl-390xx
            #nvidia-390xx-settings
            ;;
        
        3)
            GPU="nvidia-340xx nvidia-340xx-utils \
            lib32-nvidia-340xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-340xx lib32-opencl-nvidia-340xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            #libxnvctrl-340xx
            #nvidia-340xx-settings
            ;;
        
        4)
            GPU="nvidia nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils xf86-video-intel optimus-manager bbswitch optimus-manager-qt \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            GPUHYBR=true
            ;;
            
        5)
            GPU="nvidia-390xx nvidia-390xx-utils xf86-video-intel optimus-manager bbswitch optimus-manager-qt \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            GPUHYBR=true
            ;;
        
        6)
            GPU="nvidia-lts nvidia-settings nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        7)
            GPU="nvidia-390xx-lts nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        
        8)
            GPU="nvidia-dkms nvidia-utils lib32-nvidia-utils libva-utils \
            vdpauinfo libvdpau lib32-libvdpau opencl-nvidia \
            lib32-opencl-nvidia ffnvcodec-headers libxnvctrl clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        
        9)
            GPU="nvidia-390xx-dkms nvidia-390xx-utils \
            lib32-nvidia-390xx-utils libva-utils vdpauinfo libvdpau lib32-libvdpau \
            opencl-nvidia-390xx lib32-opencl-nvidia-390xx clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;        
            
        10)
            GPU="xf86-video-nouveau mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo libvdpau lib32-libvdpau opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        11)
            GPU="xf86-video-amdgpu mesa lib32-mesa vulkan-radeon \
            lib32-vulkan-radeon mesa-vdpau libva-mesa-driver lib32-mesa-vdpau \
            lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
        12)
            GPU="xf86-video-ati mesa lib32-mesa mesa-vdpau libva-mesa-driver \
            lib32-mesa-vdpau lib32-libva-mesa-driver libva-vdpau-driver libvdpau-va-gl \
            libva-utils vdpauinfo opencl-mesa clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
            
        13)
            GPU="xf86-video-intel vulkan-intel mesa lib32-mesa intel-media-driver \
            libva-intel-driver libva-vdpau-driver libvdpau-va-gl libva-utils vdpauinfo \
            intel-compute-runtime beignet clinfo ocl-icd lib32-ocl-icd opencl-headers"
            dialog --title "-| Driver de Vídeo |-" --stdout --ok-label "<Aceptar>"  --msgbox "\nyay -Sy $GPU" 10 80
            ;;
    esac
done
;;



   255) echo "Presiono la tecla [ESC]"
;;
esac

    
fi
;;
## FIN DE DRIVER VIDEO


"8")
## INICIO DE (DE) or (WM)
;;
## FIN DE (DE) or (WM)



"9")
## INICIO DE EXTRA PROGRAMS
;;
## FIN DE EXTRA PROGRAMS



"10")
## INICIO DE INSTALL
# MENSAJE 
dialog --backtitle "$titulo" \
--title "| Información |" \
--msgbox "\n> Iniciara con la descarga de [base] y [base-devel] \
\n> Acualiza la lista de MirrorList a [reflector] \
\n> Descarga el Kernel Seleccionado \
\n> Luego configura todo lo seleccionado\n \
\n> Este script solo es un asistente para una instalación rápida \
\n> Arcris usa repositorios oficiales de Arch Linux y AUR \
\n> El tiempo de instalación depende de los paquetes seleccionado " 14 73

clear
exit
;;
## FIN DE INSTALL

    esac
done




# MENSAJE 
dialog --backtitle "$titulo" \
--title "-| CREDITOS |-" --ok-label '- ¡ Gracias Totales ! -' --nocancel \
--column-separator "|" --msgbox "\n                    + Creador: Codigo Cristo +\n \
\n+ Aportaciones de la Comunidad: \n \
\n> Miqueas Martinez | @Miqueas2020 \
\n> Wilsson Martee   | @Bourne_Again \
\n> Alex             | @nahuelwexd \
\n> Cargando...      | @konrc \
\n> Eduard Tolosa    | @edu4rdt " 15 73






clear
zonahorariaok=$(curl https://ipapi.co/timezone)
timedatectl set-timezone $zonahorariaok
ntpd -qg | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Zona Horaria en LiveCD, Espere... |" 25 80; sleep 3
hwclock --systohc
timedatectl status | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Hora Local - Espere... |" 13 65; sleep 5
clear
pacman -Sy archlinux-keyring --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Claves Actualizadas del LiveCD, Espere... |" 25 100; sleep 3
#cp pacman.conf /etc/pacman.conf

pacman -Sy reflector --noconfirm | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "| Instalando paquetes en el LiveCD, espere... |" 25 80; sleep 3
reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist
clear
for i in $(seq 1 100)
do
    sleep 0.04 
    echo $i
done | dialog --backtitle "$titulo" --title '| Actualizando MirrorLists |' --gauge "\nActualizando MirrorList en el LiveCD..." 7 60 0

cat /etc/pacman.d/mirrorlist | dialog --no-collapse --cr-wrap --backtitle "$titulo" --progressbox "Mirrors List del LiveCD > Actualizadas, espere..." 25 2000; sleep 5